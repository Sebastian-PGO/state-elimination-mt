//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.StateElimination.Transitiongraph
{
    
    
    /// <summary>
    /// The default implementation of the State class
    /// </summary>
    [XmlNamespaceAttribute("http://transitiongraph/1.0")]
    [XmlNamespacePrefixAttribute("transitiongraph")]
    [ModelRepresentationClassAttribute("http://transitiongraph/1.0#//State")]
    public partial class State : ModelElement, IState, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private int _id;
        
        private static Lazy<ITypedElement> _idAttribute = new Lazy<ITypedElement>(RetrieveIdAttribute);
        
        /// <summary>
        /// The backing field for the IsFinal property
        /// </summary>
        private bool _isFinal;
        
        private static Lazy<ITypedElement> _isFinalAttribute = new Lazy<ITypedElement>(RetrieveIsFinalAttribute);
        
        /// <summary>
        /// The backing field for the IsInitial property
        /// </summary>
        private bool _isInitial;
        
        private static Lazy<ITypedElement> _isInitialAttribute = new Lazy<ITypedElement>(RetrieveIsInitialAttribute);
        
        private static Lazy<ITypedElement> _outgoingReference = new Lazy<ITypedElement>(RetrieveOutgoingReference);
        
        /// <summary>
        /// The backing field for the Outgoing property
        /// </summary>
        private StateOutgoingCollection _outgoing;
        
        private static Lazy<ITypedElement> _incomingReference = new Lazy<ITypedElement>(RetrieveIncomingReference);
        
        /// <summary>
        /// The backing field for the Incoming property
        /// </summary>
        private StateIncomingCollection _incoming;
        
        private static IClass _classInstance;
        
        public State()
        {
            this._outgoing = new StateOutgoingCollection(this);
            this._outgoing.CollectionChanging += this.OutgoingCollectionChanging;
            this._outgoing.CollectionChanged += this.OutgoingCollectionChanged;
            this._incoming = new StateIncomingCollection(this);
            this._incoming.CollectionChanging += this.IncomingCollectionChanging;
            this._incoming.CollectionChanged += this.IncomingCollectionChanged;
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [XmlAttributeAttribute(true)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    int old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e, _idAttribute);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e, _idAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isFinal property
        /// </summary>
        [XmlElementNameAttribute("isFinal")]
        [XmlAttributeAttribute(true)]
        public bool IsFinal
        {
            get
            {
                return this._isFinal;
            }
            set
            {
                if ((this._isFinal != value))
                {
                    bool old = this._isFinal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsFinalChanging(e);
                    this.OnPropertyChanging("IsFinal", e, _isFinalAttribute);
                    this._isFinal = value;
                    this.OnIsFinalChanged(e);
                    this.OnPropertyChanged("IsFinal", e, _isFinalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isInitial property
        /// </summary>
        [XmlElementNameAttribute("isInitial")]
        [XmlAttributeAttribute(true)]
        public bool IsInitial
        {
            get
            {
                return this._isInitial;
            }
            set
            {
                if ((this._isInitial != value))
                {
                    bool old = this._isInitial;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsInitialChanging(e);
                    this.OnPropertyChanging("IsInitial", e, _isInitialAttribute);
                    this._isInitial = value;
                    this.OnIsInitialChanged(e);
                    this.OnPropertyChanged("IsInitial", e, _isInitialAttribute);
                }
            }
        }
        
        /// <summary>
        /// The outgoing property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("outgoing")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("source")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ITransition> Outgoing
        {
            get
            {
                return this._outgoing;
            }
        }
        
        /// <summary>
        /// The incoming property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("incoming")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("target")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ITransition> Incoming
        {
            get
            {
                return this._incoming;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StateReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://transitiongraph/1.0#//State")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the IsFinal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsFinalChanging;
        
        /// <summary>
        /// Gets fired when the IsFinal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsFinalChanged;
        
        /// <summary>
        /// Gets fired before the IsInitial property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsInitialChanging;
        
        /// <summary>
        /// Gets fired when the IsInitial property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsInitialChanged;
        
        private static ITypedElement RetrieveIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.StateElimination.Transitiongraph.State.ClassInstance)).Resolve("id")));
        }
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsFinalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.StateElimination.Transitiongraph.State.ClassInstance)).Resolve("isFinal")));
        }
        
        /// <summary>
        /// Raises the IsFinalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsFinalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsFinalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsFinalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsFinalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsFinalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsInitialAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.StateElimination.Transitiongraph.State.ClassInstance)).Resolve("isInitial")));
        }
        
        /// <summary>
        /// Raises the IsInitialChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsInitialChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsInitialChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsInitialChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsInitialChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsInitialChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOutgoingReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.StateElimination.Transitiongraph.State.ClassInstance)).Resolve("outgoing")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Outgoing property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutgoingCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Outgoing", e, _outgoingReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Outgoing property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutgoingCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Outgoing", e, _outgoingReference);
        }
        
        private static ITypedElement RetrieveIncomingReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.StateElimination.Transitiongraph.State.ClassInstance)).Resolve("incoming")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Incoming property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncomingCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Incoming", e, _incomingReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Incoming property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncomingCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Incoming", e, _incomingReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "ISFINAL"))
            {
                return this.IsFinal;
            }
            if ((attribute == "ISINITIAL"))
            {
                return this.IsInitial;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OUTGOING"))
            {
                return this._outgoing;
            }
            if ((feature == "INCOMING"))
            {
                return this._incoming;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.Id = ((int)(value));
                return;
            }
            if ((feature == "ISFINAL"))
            {
                this.IsFinal = ((bool)(value));
                return;
            }
            if ((feature == "ISINITIAL"))
            {
                this.IsInitial = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://transitiongraph/1.0#//State")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the State class
        /// </summary>
        public class StateReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private State _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StateReferencedElementsCollection(State parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Outgoing.Count);
                    count = (count + this._parent.Incoming.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Outgoing.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Incoming.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Outgoing.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Incoming.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITransition outgoingCasted = item.As<ITransition>();
                if ((outgoingCasted != null))
                {
                    this._parent.Outgoing.Add(outgoingCasted);
                }
                ITransition incomingCasted = item.As<ITransition>();
                if ((incomingCasted != null))
                {
                    this._parent.Incoming.Add(incomingCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Outgoing.Clear();
                this._parent.Incoming.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Outgoing.Contains(item))
                {
                    return true;
                }
                if (this._parent.Incoming.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> outgoingEnumerator = this._parent.Outgoing.GetEnumerator();
                try
                {
                    for (
                    ; outgoingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outgoingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outgoingEnumerator.Dispose();
                }
                IEnumerator<IModelElement> incomingEnumerator = this._parent.Incoming.GetEnumerator();
                try
                {
                    for (
                    ; incomingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = incomingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    incomingEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITransition transitionItem = item.As<ITransition>();
                if (((transitionItem != null) 
                            && this._parent.Outgoing.Remove(transitionItem)))
                {
                    return true;
                }
                if (((transitionItem != null) 
                            && this._parent.Incoming.Remove(transitionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Outgoing).Concat(this._parent.Incoming).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IState, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IState modelElement) : 
                    base(modelElement, "id")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isFinal property
        /// </summary>
        private sealed class IsFinalProxy : ModelPropertyChange<IState, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsFinalProxy(IState modelElement) : 
                    base(modelElement, "isFinal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsFinal;
                }
                set
                {
                    this.ModelElement.IsFinal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isInitial property
        /// </summary>
        private sealed class IsInitialProxy : ModelPropertyChange<IState, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsInitialProxy(IState modelElement) : 
                    base(modelElement, "isInitial")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsInitial;
                }
                set
                {
                    this.ModelElement.IsInitial = value;
                }
            }
        }
    }
}

